// DataFolderCponfigDlg.cpp : implementation file
//

#include "stdafx.h"
#include "FileUtils.h"
#include "SimpleString.h"
#include "BrowseForFolder.h"
#include "DataFolderConfigDlg.h"
#include "afxdialogex.h"


// DataFolderCponfigDlg dialog

IMPLEMENT_DYNAMIC(DataFolderConfigDlg, CDialogEx)

extern const char *sz_Software_mboxview;

DataFolderConfigDlg::DataFolderConfigDlg(BOOL restartRequired, CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_DATA_FOLDER_DLG, pParent)
{

	m_restartRequired = restartRequired;
	m_selectedDataFolderConfigStyle = 0;

	m_folderPathColor = RGB(255, 255, 255);  // white
	m_folderPathBrush.CreateSolidBrush(m_folderPathColor);

	// Get the log font.
	NONCLIENTMETRICS ncm;
	memset(&ncm, 0, sizeof(NONCLIENTMETRICS));
	ncm.cbSize = sizeof(NONCLIENTMETRICS);

	BOOL ver = ::SystemParametersInfo(SPI_GETNONCLIENTMETRICS,
		sizeof(NONCLIENTMETRICS), &ncm, 0);

	HDC hdc = ::GetWindowDC(NULL);
	ncm.lfMessageFont.lfWeight = 400;
	ncm.lfMessageFont.lfHeight = -MulDiv(12, GetDeviceCaps(hdc, LOGPIXELSY), 72);;
	m_TextFont.CreateFontIndirect(&ncm.lfMessageFont);
	::ReleaseDC(NULL, hdc);

	hdc = ::GetWindowDC(NULL);
	ncm.lfMessageFont.lfWeight = FW_BOLD;
	ncm.lfMessageFont.lfHeight = -MulDiv(12, GetDeviceCaps(hdc, LOGPIXELSY), 72);;
	m_BoldFont.CreateFontIndirect(&ncm.lfMessageFont);
	::ReleaseDC(NULL, hdc);

	m_ButtonBrush.CreateSolidBrush(RGB(255, 255, 0));
}

DataFolderConfigDlg::~DataFolderConfigDlg()
{
}

void DataFolderConfigDlg::SetDlgItemState(BOOL setDataFolderButton, BOOL setSelectDataFolder, BOOL setWinAppDataFolder)
{
	if (GetSafeHwnd())
	{
		CWnd *p = GetDlgItem(IDC_SELECT_DATA_FOLDER_BUTTON);
		if (p)
		{
			p->EnableWindow(setDataFolderButton);
		}

		p = GetDlgItem(IDC_USER_SELECTED_FOLDER_PATH);
		if (p)
		{
			p->EnableWindow(setSelectDataFolder);
		}

		p = GetDlgItem(IDC_EDIT_WIN_APP_DATA_FOLDER);
		if (p)
		{
			p->EnableWindow(setWinAppDataFolder);
		}

	}
}

BOOL DataFolderConfigDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// TODO:  Add extra initialization here

	m_strWinAppDataFolder = FileUtils::CreateMboxviewLocalAppPath();

	m_strCurrentUserConfiguredDataFolder = CProfile::_GetProfileString(HKEY_CURRENT_USER, sz_Software_mboxview, _T("dataFolder"));
	m_dataFolder = m_strCurrentUserConfiguredDataFolder;
	m_strUserConfiguredDataFolder = m_strCurrentUserConfiguredDataFolder;

	int dataFolderConfigStyle = 0;
	m_alreadyConfiguredByUser = CProfile::_GetProfileInt(HKEY_CURRENT_USER, sz_Software_mboxview, _T("dataFolderConfigMethod"), dataFolderConfigStyle);

	if (m_alreadyConfiguredByUser)
	{
		m_currentDataFolderConfigStyle = dataFolderConfigStyle;
		m_selectedDataFolderConfigStyle = dataFolderConfigStyle;
	}
	else
	{
		m_currentDataFolderConfigStyle = 0;
		m_selectedDataFolderConfigStyle = 0;
	}

	m_winAppDataFolder.SetFont(&m_TextFont);
	m_winAppDataFolder.SetWindowText(m_strWinAppDataFolder);

	m_introText.SetFont(&m_TextFont);
	m_introText.SetWindowText("This dialog enables users to configure root data folder."
		" MBox Viewer will create MBoxViewer folder under the configured root data folder"
		" for all files generated by MBox Viewer such as mails exported in PDF format.\r\n\r\n"
		"!!! Data file path should be as short as possible to avoid truncation of names of files generated by MBox Viewer."
		" Note that the file path is limited to 255 characters. Best is to select \"Select Data Folder\" option to configure short data folder path !!!\r\n"
	);

	if (GetSafeHwnd())
	{
		CWnd *p = GetDlgItem(IDC_EDIT_INTRO);
		if (p)
		{
			p->EnableWindow(TRUE);
		}
	}

	if (m_currentDataFolderConfigStyle == 0)
	{
		CheckRadioButton(IDC_CONFIG_FOLDER_STYLE_1, IDC_CONFIG_FOLDER_STYLE_3, IDC_CONFIG_FOLDER_STYLE_1);

		SetDlgItemState(FALSE, FALSE, FALSE);
	}
	else if (m_currentDataFolderConfigStyle == 1)
	{
		m_dataFolder = m_strWinAppDataFolder;

		m_winAppDataFolder.SetFont(&m_TextFont);
		m_winAppDataFolder.SetWindowText(m_strWinAppDataFolder);

		CheckRadioButton(IDC_CONFIG_FOLDER_STYLE_1, IDC_CONFIG_FOLDER_STYLE_3, IDC_CONFIG_FOLDER_STYLE_2);

		SetDlgItemState(FALSE, FALSE, TRUE);
	}
	else if (m_currentDataFolderConfigStyle == 2)
	{
		CheckRadioButton(IDC_CONFIG_FOLDER_STYLE_1, IDC_CONFIG_FOLDER_STYLE_3, IDC_CONFIG_FOLDER_STYLE_3);

		m_userConfiguredDataFolder.SetFont(&m_BoldFont);
		m_userConfiguredDataFolder.SetWindowText(m_dataFolder);

		SetDlgItemState(TRUE, TRUE, FALSE);
	}
	else
	{
		CheckRadioButton(IDC_CONFIG_FOLDER_STYLE_1, IDC_CONFIG_FOLDER_STYLE_3, IDC_CONFIG_FOLDER_STYLE_1);

		SetDlgItemState(FALSE, FALSE, FALSE);
	}


	return TRUE;  // return TRUE unless you set the focus to a control
				  // EXCEPTION: OCX Property Pages should return FALSE
}

void DataFolderConfigDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_EDIT_INTRO, m_introText);
	DDX_Control(pDX, IDC_EDIT_WIN_APP_DATA_FOLDER, m_winAppDataFolder);
	DDX_Control(pDX, IDC_USER_SELECTED_FOLDER_PATH, m_userConfiguredDataFolder);
	DDX_Radio(pDX, IDC_CONFIG_FOLDER_STYLE_1, m_selectedDataFolderConfigStyle);
}


BEGIN_MESSAGE_MAP(DataFolderConfigDlg, CDialogEx)
	ON_WM_CTLCOLOR()
	ON_BN_CLICKED(IDC_SELECT_DATA_FOLDER_BUTTON, &DataFolderConfigDlg::OnBnClickedSelectDataFolderButton)
	ON_COMMAND_RANGE(IDC_CONFIG_FOLDER_STYLE_1, IDC_CONFIG_FOLDER_STYLE_3, &DataFolderConfigDlg::OnBnClickedConfigFolderStyle)
	ON_BN_CLICKED(IDOK, &DataFolderConfigDlg::OnBnClickedOk)
	ON_EN_CHANGE(IDC_EDIT_WIN_APP_DATA_FOLDER, &DataFolderConfigDlg::OnEnChangeEditWinAppDataFolder)
	ON_EN_CHANGE(IDC_USER_SELECTED_FOLDER_PATH, &DataFolderConfigDlg::OnEnChangeUserSelectedFolderPath)
END_MESSAGE_MAP()


// DataFolderConfigDlg message handlers
void DataFolderConfigDlg::OnBnClickedSelectDataFolderButton()
{
	// TODO: Add your control notification handler code here
	UpdateData(TRUE);  // Get data from Controls

	CString path = m_strUserConfiguredDataFolder;
	BOOL done = FALSE;
	while (!done)
	{ 
		{  //  CBrowseForFolder bff will be deleted upon exit of this block

			CBrowseForFolder bff(GetSafeHwnd(), CSIDL_DESKTOP, IDS_SELECT_FOLDER);
			if (!path.IsEmpty())
				bff.SetDefaultFolder(path);

			bff.SetFlags(BIF_RETURNONLYFSDIRS);
			if (bff.SelectFolder())
			{
				path = bff.GetSelectedFolder();
				path.TrimRight(_T("\\"));

				if (FileUtils::IsReadonlyFolder(path))
				{
					CString text;
					text.Format("Selected folder \"%s\" is readonly\n. Try again or cancel", path);
					int answer = MessageBox(text, _T("Error"), MB_APPLMODAL | MB_ICONQUESTION | MB_RETRYCANCEL);
					if (answer == IDRETRY)
					{
						continue;
					}
					else
					{
						done = TRUE;
						return;
					}
				}
				else
				{
					m_strUserConfiguredDataFolder = path;
					m_strUserConfiguredDataFolder.TrimRight("\\");
					m_strUserConfiguredDataFolder.Append("\\");
					m_dataFolder = m_strUserConfiguredDataFolder;
					done = TRUE;
					break;
				}
			}
			else  // CANCEL response
			{
				done = TRUE;
				return;
			}
		}
	}
	CString m_winAppDataFolder = FileUtils::CreateMboxviewLocalAppPath();

	if (GetSafeHwnd())
	{
		CWnd *p = GetDlgItem(IDC_USER_SELECTED_FOLDER_PATH);
		if (p)
		{
			m_userConfiguredDataFolder.SetFont(&m_BoldFont);
			m_userConfiguredDataFolder.SetWindowText(m_strUserConfiguredDataFolder);
			p->EnableWindow(FALSE);
		}
	}
}

void DataFolderConfigDlg::SetButtonColor(UINT nID, COLORREF color)
{
	return;
#if 0
	CWnd *p = GetDlgItem(nID);
	CButton *b = (CButton*)p;
	if (b)
	{
		int state = b->GetCheck();
		if (state == BST_CHECKED)
		{
			m_brBkMailsDontMatch.DeleteObject();
			m_brBkMailsDontMatch.CreateSolidBrush(m_checkedColor);
		}
	}
#endif
}

void DataFolderConfigDlg::OnBnClickedConfigFolderStyle(UINT nID)
{
	//UpdateData(TRUE);
	m_selectedDataFolderConfigStyle = nID - IDC_CONFIG_FOLDER_STYLE_1;

	// TODO: Add your control notification handler code here

	if (nID == IDC_CONFIG_FOLDER_STYLE_3)
	{
		SetDlgItemState(TRUE, FALSE, FALSE);

		m_strUserConfiguredDataFolder = "";
		m_dataFolder = m_strUserConfiguredDataFolder;

		m_userConfiguredDataFolder.SetFont(&m_BoldFont);
		m_userConfiguredDataFolder.SetWindowText(m_strUserConfiguredDataFolder);
	}
	else if (nID == IDC_CONFIG_FOLDER_STYLE_2)
	{
		SetDlgItemState(FALSE, FALSE, TRUE);

		m_dataFolder = m_strWinAppDataFolder;

		m_winAppDataFolder.SetFont(&m_TextFont);
		m_winAppDataFolder.SetWindowText(m_strWinAppDataFolder);
		//
		m_userConfiguredDataFolder.SetFont(&m_BoldFont);
		m_userConfiguredDataFolder.SetWindowText("");
	}
	else
	{
		SetDlgItemState(FALSE, FALSE, FALSE);

		m_dataFolder = "";

		m_userConfiguredDataFolder.SetFont(&m_BoldFont);
		m_userConfiguredDataFolder.SetWindowText("");
	}

	UpdateData(FALSE);
}

HBRUSH DataFolderConfigDlg::OnCtlColor(CDC* pDC, CWnd *pWnd, UINT nCtlColor)
{
	// The below works. It is called for every object in the dialog. May not be the most efficient.

	HBRUSH hbr = CDialog::OnCtlColor(pDC, pWnd, nCtlColor);

	int nID = pWnd->GetDlgCtrlID();
	if (nID == IDC_USER_SELECTED_FOLDER_PATH)
	{
		return (HBRUSH)m_folderPathBrush;
	}
	else
		return hbr;
}

void DataFolderConfigDlg::OnBnClickedOk()
{
	// TODO: Add your control notification handler code here

	m_dataFolder.TrimRight(_T("\\"));
	if ((m_selectedDataFolderConfigStyle == 2) && m_dataFolder.IsEmpty())
	{
		CString txt = "Please select root data folder.";
		int answer = MessageBox(txt, _T("Info"), MB_APPLMODAL | MB_ICONQUESTION | MB_OK);
		return;
	}

	if (m_selectedDataFolderConfigStyle != 0)
	{
		CString driveName;
			CString directory;
			CString fileNameBase;
			CString fileNameExtention;

			m_dataFolder.Append("\\");
			FileUtils::SplitFilePath(m_dataFolder, driveName, directory, fileNameBase, fileNameExtention);
			if (directory.GetLength() <= 1)
			{
				CString txt = _T("The data files must be created under a named folder.\n"
					"Please create the named folder and try again.");
				int answer = MessageBox(txt, _T("Error"), MB_APPLMODAL | MB_ICONQUESTION | MB_OK);
				return;
			}

			if (m_dataFolder.Find("MBoxViewer") >= 0)
			{
				CString txt = _T("Folder name \"MBoxViewer\" is reserved.\n"
					"Please create different folder name and try again.");
				int answer = MessageBox(txt, _T("Error"), MB_APPLMODAL | MB_ICONQUESTION | MB_OK);
				return;
			}
	}


	if ((m_selectedDataFolderConfigStyle == 0) && !m_dataFolder.IsEmpty())
	{
		_ASSERT(0);
		return;
	}
	if ((m_selectedDataFolderConfigStyle == 1) && m_dataFolder.IsEmpty())
	{
		_ASSERT(0);
		return;
	}

	if (m_alreadyConfiguredByUser)
	{
		m_strCurrentUserConfiguredDataFolder.TrimRight(_T("\\"));
		m_dataFolder.TrimRight(_T("\\"));


		if (m_dataFolder.Compare(m_strCurrentUserConfiguredDataFolder))  //differs
		{
			CString txt;
			if (m_strCurrentUserConfiguredDataFolder.IsEmpty())
			{
				txt = _T("Root Data Folder is about to change From per each folder containing mbox files\n\n");
				txt += _T("To new root data folder:\n\n\"") + m_dataFolder + _T("\"");
			}
			else if (m_dataFolder.IsEmpty())
			{
				txt = _T("Root Data Folder is about to change From:\n\n\"") + m_strCurrentUserConfiguredDataFolder + _T("\"");
				txt += _T("\n\nTo per each folder containg mbox files\n\n");
			}
			else
			{
				txt = _T("Root Data Folder is about to change From:\n\n\"") + m_strCurrentUserConfiguredDataFolder + _T("\"");
				if (m_selectedDataFolderConfigStyle == 0)
				{
					txt += _T("\n\nTo per each folder containg mbox files\n\n");
				}
				else
				{
					txt += _T("\n\nTo new root data folder:\n\n\"") + m_dataFolder + _T("\"");
				}
			}
			txt += _T("\n\nOld data will be deleted if you select YES and new data will be created by MBox Viewer under the new root data folder\n\n");
			if (m_restartRequired)
			{
				txt += _T("\n!!!!!! MBox Viewer will shudown and must be restarted by the user in order for the change to take effect !!!!!!\n\n");
			}
			int answer = MessageBox(txt, _T("Info"), MB_APPLMODAL | MB_ICONQUESTION | MB_YESNO);
			if (answer == IDNO)
				return;
		}
	}

	CProfile::_WriteProfileInt(HKEY_CURRENT_USER, sz_Software_mboxview, _T("dataFolderConfigMethod"), m_selectedDataFolderConfigStyle);

	m_dataFolder.TrimRight(_T("\\"));
	if (!m_dataFolder.IsEmpty())
		m_dataFolder.Append(_T("\\"));
	CProfile::_WriteProfileString(HKEY_CURRENT_USER, sz_Software_mboxview, _T("dataFolder"), m_dataFolder);

	if (m_restartRequired)
	{
		AfxGetMainWnd()->PostMessage(WM_CLOSE);
	}

	CDialogEx::OnOK();
}


void DataFolderConfigDlg::OnEnChangeEditWinAppDataFolder()
{
	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CDialogEx::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	// TODO:  Add your control notification handler code here
	int deb = 1;
}


void DataFolderConfigDlg::OnEnChangeUserSelectedFolderPath()
{
	// TODO:  If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CDialogEx::OnInitDialog()
	// function and call CRichEditCtrl().SetEventMask()
	// with the ENM_CHANGE flag ORed into the mask.

	// TODO:  Add your control notification handler code here
	int deb = 1;
}
